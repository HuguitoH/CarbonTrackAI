**Estructura Backend**

CarbonTrackAI-backend/
├── app.py             # Archivo principal de Flask
├── models.py          # Modelos de la base de datos (Usuario, Misiones)
├── database.db        # Base de datos SQLite para pruebas locales (usaremos PostgreSQL en producción)
├── requirements.txt   # Dependencias del backend
└── ...

1. Instalar dependencias: 
pip install Flask SQLAlchemy psycopg2

2. Crear requierments.txt: 
echo "Flask==2.0.1\nSQLAlchemy==1.4.22\npsycopg2==2.9.1" > requirements.txt

3. Appy.py

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from models import db, Usuario, Mision

app = Flask(__name__)

# Configuración de base de datos
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://tu_usuario:tu_password@localhost/huella_carbono_db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db.init_app(app)

# Ruta principal
@app.route('/')
def home():
    return "Bienvenido a CarbonTrackAI"

# Registrar usuario
@app.route('/registro', methods=['POST'])
def registro():
    data = request.json
    nombre = data.get('nombre')
    email = data.get('email')

    nuevo_usuario = Usuario(nombre=nombre, email=email, puntos=0, nivel='Novato')
    db.session.add(nuevo_usuario)
    db.session.commit()

    return jsonify({'message': f'Usuario {nombre} registrado exitosamente.'})

# Calcular huella de carbono
@app.route('/calcular_huella', methods=['POST'])
def calcular_huella():
    data = request.json
    energia = data.get('energia', 0)
    km_transporte = data.get('km_transporte', 0)
    dieta = data.get('dieta', 'normal')

    huella = energia * 0.5 + km_transporte * 0.21 + (2 if dieta == 'vegetariana' else 5)
    return jsonify({'huella': huella})

# Rutas de misiones diarias
@app.route('/retos_diarios', methods=['GET'])
def retos_diarios():
    retos = Mision.query.all()
    lista_retos = [{'descripcion': reto.descripcion, 'puntos': reto.puntos} for reto in retos]
    return jsonify(lista_retos)

@app.route('/completar_reto', methods=['POST'])
def completar_reto():
    data = request.json
    reto_id = data.get('reto_id')
    puntos_actuales = data.get('puntos', 0)

    reto = Mision.query.get(reto_id)
    if reto:
        puntos_actuales += reto.puntos

    return jsonify({'puntos_totales': puntos_actuales})

if __name__ == '__main__':
    app.run(debug=True)

4. (models.py)

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Usuario(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    puntos = db.Column(db.Integer, default=0)
    nivel = db.Column(db.String(50), default='Novato')

class Mision(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    descripcion = db.Column(db.String(255), nullable=False)
    puntos = db.Column(db.Integer, nullable=False)


5. PostgreSQL
createdb huella_carbono_db

5.1 Migraciones: 

flask db init
flask db migrate
flask db upgrade




**Estructura Frontend**

1. Reactive Native: 
npx react-native init CarbonTrackAI-mobile
cd CarbonTrackAI-mobile

2.Dependecias: 
npm install axios react-navigation react-native-chart-kit react-native-svg

3. Estructura Frontend: 

CarbonTrackAI-mobile/
├── App.js                   # Componente principal de React Native
├── src/
│   ├── components/
│   ├── screens/
│   │   ├── Registro.js       # Pantalla de registro
│   │   ├── Misiones.js       # Pantalla de misiones diarias
│   │   ├── Progreso.js       # Pantalla de progreso del usuario
│   │   ├── Perfil.js         # Pantalla del perfil del usuario
│   └── ...
└── ...


4. (Registro.js)

import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet } from 'react-native';
import axios from 'axios';

export default function Registro() {
  const [nombre, setNombre] = useState('');
  const [email, setEmail] = useState('');
  const [mensaje, setMensaje] = useState('');

  const registrarUsuario = async () => {
    try {
      const response = await axios.post('http://127.0.0.1:5000/registro', {
        nombre: nombre,
        email: email
      });
      setMensaje(response.data.message);
    } catch (error) {
      console.error('Error al registrar usuario', error);
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Regístrate en CarbonTrackAI</Text>

      <TextInput
        style={styles.input}
        placeholder="Nombre"
        value={nombre}
        onChangeText={setNombre}
      />

      <TextInput
        style={styles.input}
        placeholder="Email"
        value={email}
        onChangeText={setEmail}
      />

      <Button title="Registrarse" onPress={registrarUsuario} />

      {mensaje ? <Text style={styles.mensaje}>{mensaje}</Text> : null}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#f8f9fa',
    flex: 1,
    justifyContent: 'center',
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    borderColor: '#ced4da',
    borderWidth: 1,
    padding: 10,
    marginBottom: 15,
    borderRadius: 5,
  },
  mensaje: {
    marginTop: 20,
    fontSize: 16,
    textAlign: 'center',
  },
});


5. (Misiones.js)

import React, { useState, useEffect } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import axios from 'axios';

export default function Misiones() {
  const [retos, setRetos] = useState([]);
  const [puntos, setPuntos] = useState(0);

  useEffect(() => {
    const obtenerRetos = async () => {
      const response = await axios.get('http://127.0.0.1:5000/retos_diarios');
      setRetos(response.data);
    };
    obtenerRetos();
  }, []);

  const completarReto = async (id) => {
    const response = await axios.post('http://127.0.0.1:5000/completar_reto', { reto_id: id, puntos: puntos });
    setPuntos(response.data.puntos_totales);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Misiones Diarias</Text>
      {retos.map((reto, index) => (
        <View key={index} style={styles.reto}>
          <Text>{reto.descripcion}</Text>
          <Button title="Completar" onPress={() => completarReto(index)} />
        </View>
      ))}
      <Text style={styles.puntos}>Puntos totales: {puntos}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: '#fff',
    flex: 1,
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
    textAlign: 'center',
  },
  reto: {
    marginBottom: 15,
    padding: 10,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 5,
  },
  puntos: {
    marginTop: 20,
    fontSize: 18,
    textAlign: 'center',
  },
});

6. (Progreso.js) // react-native-chart-kit

import React from 'react';
import { View, Text, Dimensions } from 'react-native';
import { LineChart } from 'react-native-chart-kit';

export default function Progreso() {
  const data = [30, 45, 28, 80, 99, 43, 50];  // Datos simulados

  return (
    <View>
      <Text style={{ fontSize: 24, textAlign: 'center', margin: 20 }}>Progreso Semanal</Text>
      <LineChart
        data={{
          labels: ["Lun", "Mar", "Mié", "Jue", "Vie", "Sáb", "Dom"],
          datasets: [{ data }]
        }}
        width={Dimensions.get("window").width - 20}  // Llenar pantalla
        height={220}
        chartConfig={{
          backgroundColor: "#f5f5f5",
          backgroundGradientFrom: "#fff",
          backgroundGradientTo: "#f5f5f5",
          decimalPlaces: 2,
          color: (opacity = 1) => `rgba(34, 202, 236, ${opacity})`,
        }}
        style={{ borderRadius: 16 }}
      />
    </View>
  );
}
